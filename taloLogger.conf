# PÃ„RANSVERSION
###########################################################################
# 
# File:            taloLogger.conf
#
# License:         Donationware, see attached LICENSE file for more 
#                  information
#
# Author:          Olli Lammi (olammi@iki.fi)
#
# Version:         1.7k
#
# Date:            15.03.2020
#                   
# Description:     Configuration file for taloLogger.py
#
###########################################################################


############################################################################# 
# logger configuration
############################################################################# 

# log to console instead of log file (even if the log filename is configured 
# below) (true/false)
CONSOLE_LOGGING = true

# verbose logging mode / debug mode (more information about measurements 
# etc. logged) (true/false) 
VERBOSE_LOGGING = true

# go into background after start (true/false) 
DAEMON_MODE = false

# log file for the logger application
LOGFILE = /home/talo/data/taloLogger.log

# time interval in seconds to read and store the data
LOG_INTERVAL = 120 

# time window in seconds to run the logging if of some reason
# the logging process wakes up late of the configured interval time
LOG_INTERVAL_LIMIT = 5

# Directory for persistent state
# If given, taloLogger and modules may persist part of their state as files
# to this directory. When taloLogger is started, the state may be loaded.
# Empty value disables state persisting.
#PERSISTENT_STATE_DIRECTORY = /home/talo/var/taloLogger/state


############################################################################# 
# data sources
#############################################################################
#
# Syntax:  @DATASOURCE=sourcemodule:modulename
# 
#          sourcemodule - Datasource module. Possible values are:
#                   DUMMY    - Provides dummy sinusoidial curve for testing
#                   SHELL    - Shell script or executable data source module
#                   OWFS     - OneWire module for OWFS
#                   DIGITEMP - OneWire module for DigiTemp
#                   MODBUS   - Modbus module
#                   EDSOWSERVER - OneWire module for EDS OWSERVER-ENET-2
#                   OUMAN    - OumanSerial module
#                   OUMANEH800 - Ouman EH800 ethernet module
#                   THERMIA  - ThermiaSerial module
#                   REGO     - RegoSerial module
#                   REGOCAN  - RegoCanSerial module
#                   EKOWELL  - EkowellSerial module
#                   NIBE     - NibeSerial module
#                   NIBEMODBUS - NibeModbus module
#                   NIBERS485 - NibeBusRS485 module
#                   THERMIQ  - ThermIQSerial module
#                   HUSDATA  - Husdata H1-interface module
#                   SMARTWEB - SmartWeb module
#                   TELLDUS  - Telldus module
#                   RPIGPIO  - Raspberry Pi GPIO module
#                   EDAMODBUSTCP - Enervent EDA ModbusTCP module
#                   EDASERIAL - Enervent EDA Serial module
#                   STELTRONCAN - StiebelEltronCanSerial module
#
#          modulename - identifying unique name given to this module in this 
#                   configuration. Module specific configuration parameters
#                   refer to this module name. Measurement points refer to 
#                   this module name. 
#
#                   Multiple datasources can be configured to use the same
#                   datasource module that have separate configuration values, 
#                   for example different serial ports.
#
# Example: Configure 2 Ouman controllers and onewire using OWFS. The 2 Ouman
#          controllers will be referred as OUMAN1 and OUMAN2 later in the
#          configuration. OWFS will be referred as Onewire.
#
#            @DATASOURCE=OUMAN:OUMAN1
#            @DATASOURCE=OUMAN:OUMAN2
#            @DATASOURCE=OWFS:Onewire
#
#############################################################################
@DATASOURCE=DUMMY:DUMMY
#@DATASOURCE=OUMAN:OUMAN
#@DATASOURCE=OUMANEH800:OUMANEH800
#@DATASOURCE=THERMIA:THERMIA 
#@DATASOURCE=REGO:REGO
#@DATASOURCE=REGOCAN:REGOCAN
#@DATASOURCE=EKOWELL:EKOWELL
#@DATASOURCE=NIBE:NIBE
#@DATASOURCE=NIBEMODBUS:NIBEMODBUS
#@DATASOURCE=NIBERS485:NIBERS485
#@DATASOURCE=THERMIQ:THERMIQ
#@DATASOURCE=HUSDATA:HUSDATA
#@DATASOURCE=SMARTWEB:SMARTWEB
#@DATASOURCE=OWFS:OWFS
#@DATASOURCE=DIGITEMP:DIGITEMP
#@DATASOURCE=EDSOWSERVER:EDSOWSERVER
#@DATASOURCE=SHELL:SHELL1
#@DATASOURCE=TELLDUS:TELLDUS
#@DATASOURCE=RPIGPIO:GPIO
#@DATASOURCE=MODBUS:MODBUS
#@DATASOURCE=EDAMODBUSTCP:EDAMODBUSTCP
#@DATASOURCE=EDASERIAL:EDASERIAL
#@DATASOURCE=STELTRONCAN:STELTRONCAN



############################################################################# 
# data stores
#############################################################################
#
# Syntax:  @DATASTORE=storemodule:modulename
# 
#          storemodule - Datastore module. Possible values are:
#                   FILESTORE  - Filestore module
#                   RRD        - RRD store module
#                   MYSQLDB    - MySQL database store module
#                   POSTGREDB  - PostgreSQL database store module
#                   SQLITEDB   - SQLite database file store module
#                   THINGSPEAK - ThingSpeak cloud store module
#                   MQTT       - MQTT broker store module
#
#          modulename - identifying unique name given to this module in this 
#                   configuration. Module specific configuration parameters
#                   refer to this module name.
#
# Info:    If no datastores are configured, taloLogger will output the 
#          measured data to the application log.
#
# Example: @DATASTORE=FILESTORE:Logfile
#
#############################################################################
#@DATASTORE=FILESTORE:Logfile
#@DATASTORE=FILESTORE:XMLFILE
#@DATASTORE=RRD:RRD
#@DATASTORE=MYSQLDB:MYSQLDB
#@DATASTORE=POSTGREDB:POSTGREDB
#@DATASTORE=SQLITEDB:SQLITEDB
#@DATASTORE=THINGSPEAK:THINGSPEAK
@DATASTORE=MQTT:MQTT



############################################################################# 
# OumanSerial configuration
############################################################################# 

# Ouman device type (see oumanSerial.py for available types)
OUMAN:DEVICE = EH202S

# Serial port address/name where the Ouman device is connected
OUMAN:SERIAL_PORT = /dev/ttyS0



############################################################################# 
# Ouman EH800 configuration
############################################################################# 

# Ouman EH800 device base URL
OUMANEH800:URL = http://10.0.0.1/



############################################################################# 
# ThermiaSerial configuration
############################################################################# 

# Thermia device type (see thermiaSerial.py for available types)
THERMIA:DEVICE = DEFAULT

# Serial port address/name where the Thermia device is connected
THERMIA:SERIAL_PORT = /dev/ttyS0



############################################################################# 
# RegoSerial configuration
############################################################################# 

# Rego device type (see regoSerial.py for available types)
REGO:DEVICE = REGO600

# Serial port address/name where the Rego device is connected
REGO:SERIAL_PORT = /dev/ttyS0



############################################################################# 
# RegoCanSerial configuration
############################################################################# 

# RegoCan device type (see regoCanSerial.py for available types)
REGOCAN:DEVICE = REGO1000

# Serial port address/name where the Can232 device is connected
REGOCAN:SERIAL_PORT = /dev/ttyS0

# Serial port baudrate (optional, default is 57600) for the Can232 device
REGOCAN:BAUDRATE = 57600



############################################################################# 
# EkowellSerial configuration
############################################################################# 

# Ekowell device type (see ekowellSerial.py for available types)
EKOWELL:DEVICE = DEFAULT

# Serial port address/name where the Ekowell device is connected
EKOWELL:SERIAL_PORT = /dev/ttyS0



############################################################################# 
# NibeSerial configuration
############################################################################# 

# Nibe device type (see nibeSerial.py for available types)
NIBE:DEVICE = DEFAULT

# Serial port address/name where the Nibe device is connected
NIBE:SERIAL_PORT = /dev/ttyS0



############################################################################# 
# NibeModbus configuration
############################################################################# 

# Serial port address/name where the Nibe Modbus slave is connected
NIBEMODBUS:SERIAL_PORT = /dev/ttyS0

# Modbus unit id for queries (default 1)
NIBEMODBUS:UNITID = 1



############################################################################# 
# Nibe Bus RS485 (net and serial) configuration
############################################################################# 

# Connection type. Mandatory parameter. Values:
#     SERIAL  -  Use serial port connection to RS485 adapter connected to
#                Nibe Bus.
#     UDP     -  Use OpenHab NibeGW connected to Nibe Bus to send bus
#                frames over network to this module.
NIBERS485:TYPE = UDP

# Nibe device type. Values: 
#     DEFAULT -  Use default datapoint configuration. (default)
NIBERS485:DEVICE = DEFAULT

# SERIAL: Serial port address/name where the RS485 serial adapter to Nibe Bus is
# connected
NIBERS485:SERIAL_PORT = /dev/ttyS0

# UDP: IP address to listen to (eg. 0.0.0.0, 127.0.0.1 or this hosts IP)
# Default is 0.0.0.0, will listen to all interfaces on this host.
NIBERS485:LISTENADDRESS = 0.0.0.0

# UDP: UDP port number to listen to (default: 9999)
NIBERS485:UDPPORT = 9999

# UDP: If set, NIBERS485 module in UDP mode will initiate datapoint queries
# to the NibeGW, if the GW does not provide required positions in the default
# position set. (eg. 192.168.10.10 or remote hostname)
# Default is None (queries disabled)
#NIBERS485:QUERY_ADDRESS = x.x.x.x

# UDP: UDP port number to send query UDP packages to (default: 9999)
NIBERS485:QUERY_UDPPORT = 9999



############################################################################# 
# ThermIQSerial configuration
############################################################################# 

# ThermIQ device type (see thermIQSerial.py for available types)
THERMIQ:DEVICE = DEFAULT

# Serial port address/name where the ThermIQ device is connected
THERMIQ:SERIAL_PORT = /dev/ttyS0



############################################################################# 
# HusdataSerial configuration
############################################################################# 

# Serial port address/name where the Husdata H1-interface device is connected
HUSDATA:SERIAL_PORT = /dev/ttyS0

# For available keys for the measured values for this module are listed in 
# the Husdata.se H1 Interface developers manual. Keys are in hexadecimal
# form and 3 digits in lenght (omit the first type digit). For example
# outdoor temperature is accessible with id 007 and compressor state value
# with id A01.  (http://www.husdata.se/dl.asp?h=22344)



############################################################################# 
# SmartWeb configuration
############################################################################# 

# URL to SmartWeb interface
SMARTWEB:URL = http://10.0.0.1

# Username for SmartWeb interface
SMARTWEB:USER = username

# Password for SmartWeb interface
SMARTWEB:PASSWORD = password

# SmartWeb measurement points configuration
#
# Syntax:  @<modulename>:ITEMID=key:id
#
#          key      - title or key for the measured value, key is used as label
#                     for SMARTWEB-measurement point
#
#          id       - Item id for the SmartWeb data
#
@SMARTWEB:ITEMID = Outdoor:3846
@SMARTWEB:ITEMID = Indoor:3877



############################################################################# 
# OWFS configuration
############################################################################# 

# Workaround for rare OWFS issues. Enables external killable process for reading
# OWFS data.
#OWFS:USE_EXTERNAL_PROCESS = true

# OneWire measurement points configuration
#
# Syntax:  @<modulename>:OWFS=key:type:filename
#
#          key      - title or key for the measured value, key is used as label
#                     for OWFS-measurement point
# 
#          type     - value type:
#                     1 - floating point value
#                     2 - integer value
#
#          filename - filename for the OWFS file to read
#
@OWFS:OWFS = Outdoor:1:/home/talo/owfs/28.3E10F6010000/temperature12
@OWFS:OWFS = Kwh_counter:1:/home/talo/owfs/1D.F86D07000000/counters.A

# OneWireFS init, pre-measure and post-measure commands. 
#
# Configures list of system commands to execute in different points
# of logging. Commands are run in the same order the appear on the
# configuration file. Commands are run in OWFS measurement thread
# and for example sleep commands affect only OWFS measurement 
# execution. 
#
# Syntax:  @<modulename>:INITCMD=command
#          @<modulename>:PRECMD=command
#          @<modulename>:POSTCMD=command
#
#          INITCMD, command  - Commands will be run when taloLogger starts,
#                              when initiating OWFS module.
#
#          PRECMD, command   - Commands will be run before a measurement
#                              run is done (once in measuremet period,
#                              before OWFS values are read).
#
#          POSTCMD, command  - Commands will be run after a measurement
#                              run is done.
#
# The commands are executed as they were given from the command line. 
# The order of execution:
#
#       * taloLogger starts
#       * run all INITCMDs
#       * wait for log period...
#       * run all PRECMDs
#       * log the data from OWFS points
#       * run all POSTCMDs
#       * wait for log period...
#       * run all PRECMDs
#       * log the data from OWFS points
#       * ...
#
# Example measure IO-state from 1-wire device channel B, before measuring
# set latch and PIO to correct values for reading.
#
#    @OWFS:PRECMD = echo "1" > /home/talo/owfs/12.B0D71C000000/latch.B
#    @OWFS:PRECMD = echo "0" > /home/talo/owfs/12.B0D71C000000/PIO.B
#    @OWFS:OWFS = iostate:2:/home/talo/owfs/12.B0D71C000000/sensed.B



############################################################################# 
# DigiTemp configuration
############################################################################# 

# Location of the digitemp executable
DIGITEMP:LOCATION = /usr/bin/digitemp_DS2490

# Digitemp port (use value "USB" for USB 1-wire modules)
DIGITEMP:PORT = USB

# Location of the digitemp configuration file
DIGITEMP:CONFFILE = /home/talo/etc/digitemprc



############################################################################# 
# EDS OWSERVER-ENET-2 configuration
############################################################################# 

# URL for the OWSERVER-ENET-2 data in Details XML form
EDSOWSERVER:URL = http://10.0.0.1:80/details.xml

# OWSERVER measurement points configuration
#
# Syntax:  @<modulename>:DATAPOINT=key:romid:type:valuekey
#
#          key      - title or key for the measured value, key is used as label
#                     for EDSOWSERVER-measurement point
#
#          romid    - OneWire device ROM ID
#                     Example: 6B000004467F0028
#
#          type     - value type:
#                     1 - floating point value
#                     2 - integer value
#
#          valuekey - Device parameter key to read
#                     (eg. Temperature, Counter_A, Counter_B)                     
#
@EDSOWSERVER:DATAPOINT = Outdoor:6B000004467F0028:1:Temperature
@EDSOWSERVER:DATAPOINT = Indoor:7C000004467B4C28:1:Temperature
@EDSOWSERVER:DATAPOINT = KWHCounter:670000000FD8B31D:2:Counter_A



############################################################################# 
# Shell module configuration
############################################################################# 

# Location of the shell script or executable
SHELL1:LOCATION = /usr/bin/uptime

# Script or executable parameters
SHELL1:PARAMETERS = 

# Result value regexp. Regular expression may contain multiple named groups
# and it is possible to configure multiple regular expressions on the command
# result (using list type @<modulename>:REGEXP=). Pre v1.6i it was possible
# to configure only one regular expression with multiple named groups. This
# is still compatible and non-list type may also be used.
@SHELL1:REGEXP = ^.*,\s(?P<users>[0-9]+)\susers.*$
@SHELL1:REGEXP = ^.*load\saverage:\s*(?P<load>[0-9\.]+)\s*,.*$



############################################################################# 
# Telldus module configuration
############################################################################# 

# Type of the Telldus connection. Values:
#
#     LIB  - Uses Telldus library to retrieve sensor values (telldus-core,
#            works with USB connected Telldus TellStick Duo), Default value
# 
#     LIVE - Uses Telldus Live service API to retrieve sensor values
#            (works with network connected Telldus TellStick Net)
TELLDUS:TYPE=LIB

# TELLDUS measurement points/sensors configuration
#
# Syntax:  @<modulename>:SENSOR=key:protocol:model:id:datatype
#
#          key      - title or key for the measured value, key is used as label
#                     for TELLDUS-measurement point
#
#          protocol - Wireless sensor protocol
#                     Example: mandolyn
#
#          model    - Wireless sensor model (value ignored with LIVE library type)
#                     Example: temperaturehumidity
#
#          id       - Sensor id (integer)
#
#          datatype - Data type from sensor (one of the following)
#                       TEMPERATURE
#                       HUMIDITY
#                       RAINRATE
#                       RAINTOTAL
#                       WINDDIRECTION
#                       WINDAVERAGE
#                       WINDGUST
#
#@TELLDUS:SENSOR=Outdoor:mandolyn:temperaturehumidity:11:TEMPERATURE
#@TELLDUS:SENSOR=Outdoor_humidity:mandolyn:temperaturehumidity:11:HUMIDITY

# LIVE service API: Authentication configuration for Telldus Live service API. Use 
# Telldus Live API web site to authenticate and retrieve required authentication
# keys for taloLogger (URL: https://api.telldus.com/keys/index)
TELLDUS:PUBLIC_KEY = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
TELLDUS:PRIVATE_KEY = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
TELLDUS:TOKEN = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
TELLDUS:TOKEN_SECRET = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


############################################################################# 
# Raspberry Pi GPIO module configuration
############################################################################# 

# RPIGPIO measurement points/sensors configuration
#
# Syntax:  @<modulename>:INPUT=key:channel:flag[:COUNTER[:bouncetime]]
#
#          key      - title or key for the measured value, key is used as label
#                     for GPIO-measurement point
#
#          channel  - GPIO channel number for this input. (BOARD numbering system)
#
#          flag     - Broadcomm SOC flag for this channel
#                       NONE     - no flag
#                       PULLUP   - use Broadcomm chip software 
#                                  pullup resistor for this input.
#                       PULLDOWN - use Broadcomm chip software 
#                                  pulldown resistor for this input.
#
#          COUNTER  - Use this input as a counter input. TaloLogger will count
#                     the input edge events (both rising and falling) during
#                     the log interval. Returned value is not the state
#                     of the input but counted edges since last read.
#
#          bouncetime - (optional) For COUNTER inputs this will enable software 
#                     switch debouncing. Value is in milliseconds. 
#                     Value 0 (default) deactivates software debouncing.
#
#@GPIO:INPUT=State1:11:NONE
#@GPIO:INPUT=State2:13:PULLUP
#@GPIO:INPUT=Counter1:22:PULLUP:COUNTER:200


############################################################################# 
# Modbus module configuration
############################################################################# 

# Modbus connection type:
#     Values:       RTU   - Modbus RTU Serial connection (default)
#                   ASCII - Modbus ASCII Seriall connection
#                   TCP   - Modbus TCP network connection 
MODBUS:TYPE = TCP

# TCP: Modbus slave network hostname
MODBUS:HOSTNAME = 10.0.0.1

# TCP: Modbus slave network port (default: 502)
MODBUS:TCPPORT = 502

# RTU/ASCII: Serial port name (eg. /dev/ttyS0, /dev/ttyUSB0, COM1, ...) 
MODBUS:SERIAL_PORT = /dev/ttyUSB0

# RTU/ASCII: Serial port speed (default: 19200)
MODBUS:BAUDRATE = 19200

# RTU/ASCII: Serial port parity (values: EVEN (default), ODD, NONE, MARK, SPACE)
MODBUS:PARITY = EVEN

# RTU/ASCII: Serial port databits (values: 5, 6, 7, 8 (default))
MODBUS:DATABITS = 8

# RTU/ASCII: Serial port stopbits (values: 1 (default), 1.5, 2)
MODBUS:STOPBITS = 1

# Timeout in seconds to wait for single query to complete before timeout error
# (default 2.0)
MODBUS:RESPONSETIMEOUT = 2.0

# Modbus measurement points configuration
#
# Syntax:  @<modulename>:COILSTATE=key:unitid:element
#          @<modulename>:INPUTSTATE=key:unitid:element
#          @<modulename>:HOLDINGREGISTER=key:unitid:element:valuetype:factor
#          @<modulename>:INPUTREGISTER=key:unitid:element:valuetype:factor
#
#          COILSTATE - read one boolean modbus state coil
#          INPUTSTATE - read one boolean modbus discrete state input
#          HOLDINGREGISTER - read one 16 bit modbus holding register
#          INPUTREGISTER - read one 16 bit modbus input register
#
#          key      - title or key for the measured value, key is used as label
#                     for Modbus-measurement point
#
#          unitid   - Modbus unit id (integer)
#
#          element  - element number of this modbus state/register (1-65536), element 
#                     number of the first register for multiple register types
#
#          valuetype - Interpretation of the 16 bit integer in the register(s)
#                      Possible valuetypes are: 
#                        for integers: [F][U]INT(8|16|32[H]|64[H])
#                        for floats:   FLOAT(32[H]|64[H])
#                      Samples: FUINT32, FUINT32H, UINT16, INT16, INT64, FLOAT32, FLOAT64H
#
#                       [F]  -  integer will be output as value having decimal point
#                               after interpretation and multiplying with factor
#                       [U]  -  integer is treated as unsigned, otherwise signed
#                       INT  -  register values are handled as integers
#                       FLOAT - register values are handles as  
#                               single precision floating point number 
#                               (IEEE 754, 32 and 64 bits).
#                       8|16|32|64 - bits in the value bit representation. Registers are 
#                               16 bit long in the modbus. Multiple consecutive registers 
#                               may be used to represent longer number. Available
#                               are 8 bits (half of one modbus register),
#                               16 bits (one native modbus register), 32 bits
#                               (two consecutive registers), 64 bits (4 consecutive
#                               registers). For float, only 32 and 64 bits.
#                       [H] -   for 32 and 64 bit values, using multiple registers, the
#                               default word order is Lo word/Least significant word
#                               first. Adding H after the bits makes this module read
#                               Hi word/Most significant word first.
#          
#          factor   - factor for the real life value. Received result value 
#                     is multiplied by the factor before storing to the log 
#                     (eg. 0.01 if the 16 bit integer value contains the real 
#                     life temperature value multiplied by 100) 
#
# Examples:
#          @MODBUS:COILSTATE=pumpstate:1:138
#          @MODBUS:HOLDINGREGISTER=airtemperature:1:1002:FINT16:0.1
#          @MODBUS:HOLDINGREGISTER=kwhcounter:1:23412:UINT64H:1
#
#@MODBUS:HOLDINGREGISTER=outdoor:1:15:FINT16:0.1



############################################################################# 
# Enervent EDA ModbusTCP configuration
############################################################################# 

# Host name or IP address for Enervent ModbusTCP slave (Enervent Freeway WEB)
EDAMODBUSTCP:HOSTNAME = 10.0.0.1

# TCP port for Enervent ModbusTCP slave (Enervent Freeway WEB) (default 502)
EDAMODBUSTCP:TCPPORT = 502

# Modbus unit id for queries (default 1)
EDAMODBUSTCP:UNITID = 1

# Modbus addressing off-by-one fix (true = Fix enabled, false = Fix disabled (default))
# Testing showed that at least on some devices the modbus data element numbering
# and modbus data PDU addressing does not match the modbus specification
# and the data addressing is off-by-one - or interpretation of the Enervent 
# modbus data element documentation is wrong in taloLogger. 
# Enabling this fix will fix this off-by-one issue. 
EDAMODBUSTCP:OFFBYONEFIX = false


############################################################################# 
# Enervent EDA Serial Modbus RTU configuration
############################################################################# 

# Serial port name/address
EDASERIAL:SERIAL_PORT = /dev/ttyS0

# Modbus Serial RTU mode.
#     Values:       MASTER   - Modbus master mode (default)
#                   SLAVE    - Listens to Modbus activity on bus without
#                              sending packets.
EDASERIAL:MODE = MASTER

# Modbus unit id for queries (default 1), used only for MASTER mode
EDASERIAL:UNITID = 1

# Modbus addressing off-by-one fix (true = Fix enabled, false = Fix disabled (default))
# Testing showed that at least on some devices the modbus data element numbering
# and modbus RTU data PDU addressing does not match the modbus specification
# and the data addressing is off-by-one - or interpretation of the Enervent 
# modbus data element documentation is wrong in taloLogger. 
# Enabling this fix will fix this off-by-one issue. 
EDASERIAL:OFFBYONEFIX = false


############################################################################# 
# StiebelEltronCanSerial configuration
############################################################################# 

# StiebelEltronCan device type (see stEltronCanSerial.py for available types)
STELTRONCAN:DEVICE = DEFAULT

# Serial port address/name where the Can232 device is connected
STELTRONCAN:SERIAL_PORT = /dev/ttyS0

# Serial port baudrate (optional, default is 57600) for the Can232 device
STELTRONCAN:BAUDRATE = 57600



############################################################################# 
# File store configuration
############################################################################# 

# Filename to log the data into
FILESTORE:NAME = /home/talo/log/data.log

# Whether the log file will be overwritten on each log run producing a
# file with only the latest log data. (default false, the log file is
# appended with new data)
FILESTORE:OVERWRITE = false

# Pattern for the timestamp. The pattern is according to definition of the 
# Python time.strftime function. (The definition and pattern directives:
# http://docs.python.org/library/time.html#time.strftime )
#
# Example: Pattern  %d.%m.%Y %H:%M:%S  will produce a timestamp 
#          DD.MM.YYYY HH:MM:SS    
FILESTORE:TIMESTAMP = %d.%m.%Y %H:%M:%S

# Patterns for the data in the log file
#
#     :HEADER        written to the file before the data values
#     :DATAVALUE     pattern for one datavalue (will be inserted
#                    as many times as there are measured values
#     :DELIMITER     written between datavalues
#     :FOOTER        written to the file after the data values  
# 
# The patterns may contain the following escapes that are replaced
# with corresponding values. Pattern names are case insensitive so
# for example %s% and %S% will produce same result:
#    %S%     - one space character
#    %N%     - one newline
#    %T%     - one tab char
#    %A%     - one newline char (0x0A)
#    %R%     - one carriage return char (0x0D)
#    %TIME%  - timestamp in form configured by :TIMESTAMP pattern
#    %KEY%   - in the :DATAVALUE pattern will be the key corresponding to the
#              measurement. 
#    %VALUE% - in the :DATAVALUE pattern the data value corresponding to the
#              measurement, decimal separator as is read from the source.
#    %VALUE_C% - in the :DATAVALUE pattern the data value corresponding to the
#              measurement, decimal points converted to commas ','.    
#    %VALUE_P% - in the :DATAVALUE pattern the data value corresponding to the
#              measurement, decimal points converted to periods '.'.    
#
# Example:  the follofing patterns will produce a Excel CSV-file format
# FILESTORE:HEADER = %TIME%;
# FILESTORE:DATAVALUE = %VALUE_C%
# FILESTORE:DELIMITER = ;
# FILESTORE:FOOTER = %D%%A%

FILESTORE:HEADER = %TIME%:%N%
FILESTORE:DATAVALUE = %S%%S%%S%%S%%KEY%:%VALUE%%N%
FILESTORE:DELIMITER = 
FILESTORE:FOOTER = 



############################################################################# 
# XML file store configuration
############################################################################# 

# XML Filename to log the last measured data into
XMLFILE:NAME = /home/talo/data/lastdata.xml

XMLFILE:OVERWRITE = true
XMLFILE:TIMESTAMP = %d.%m.%Y %H:%M:%S
XMLFILE:HEADER = <?xml version="1.0" encoding="UTF-8"?>%N%<Log>%N%%S%%S%<LogTime>%TIME%</LogTime>%N%%S%%S%<LogData>%N%
XMLFILE:DATAVALUE = %S%%S%%S%%S%<Position>%N%%S%%S%%S%%S%%S%%S%<Key>%KEY%</Key>%N%%S%%S%%S%%S%%S%%S%<Value>%VALUE%</Value>%N%%S%%S%%S%%S%</Position>%N%
XMLFILE:FOOTER = %S%%S%</LogData>%N%</Log>%N%



############################################################################# 
# RrdTool data store configuration
############################################################################# 

# Location of the rrdtool executable
RRD:RRDTOOL_LOCATION = /usr/bin/rrdtool

# Filename of the rrd database to log the data into
RRD:DB_FILENAME = /home/talo/log/talologger.rrd



############################################################################# 
# MySql Database data store configuration
############################################################################# 

# Host name for MySql database
MYSQLDB:HOST = localhost 

# Port number for MySql database (optional, default 3306)
MYSQLDB:PORT = 3306 

# Database user name
MYSQLDB:USER = talo 

# Database password
MYSQLDB:PASSWD = xxpassxx

# Database name
MYSQLDB:NAME = talo

# Data table name
#MYSQLDB:TABLE = talolog

# Name for column to store timestamp for the measured data
#MYSQLDB:TIMECOL = time

# Native taloLogger database schema version. 0 or undefined to use
# user defined table name and time column. If set, TABLE and TIMECOL
# configuration values will be ignored.
# Available versions: 
#     1  -  since taloLoggerGraph v1.1a and taloLogger v1.5a
MYSQLDB:DB_SCHEMA_VERSION = 1

# Option to use MySQL Connector/Python for database access library
#     false - (Default) Use MySQLdb library
#     true  - Use MySQL Connector/Python
MYSQLDB:USE_MYSQL_CONNECTOR = false


############################################################################# 
# PostgreSQL Database data store configuration
############################################################################# 

# Host name for PostgreSQL database
POSTGREDB:HOST = localhost 

# Port number for PostgreSQL database (optional, default 5432)
POSTGREDB:PORT = 5432 

# Database user name
POSTGREDB:USER = talo 

# Database password
POSTGREDB:PASSWD = xxpassxx

# Database name
POSTGREDB:NAME = talo

# Data table name
#POSTGREDB:TABLE = talolog

# Name for column to store timestamp for the measured data
#POSTGREDB:TIMECOL = time

# Native taloLogger database schema version. 0 or undefined to use
# user defined table name and time column. If set, TABLE and TIMECOL
# configuration values will be ignored.
# Available versions: 
#     1  -  since taloLoggerGraph v1.1a and taloLogger v1.5a
POSTGREDB:DB_SCHEMA_VERSION = 1


############################################################################# 
# SQLite Database data store configuration
############################################################################# 

# Database name (db file name)
SQLITEDB:NAME = /home/talo/data/talo.db

# Data table name
#SQLITEDB:TABLE = talolog

# Name for column to store timestamp for the measured data
#SQLITEDB:TIMECOL = time

# Native taloLogger database schema version. 0 or undefined to use
# user defined table name and time column. If set, TABLE and TIMECOL
# configuration values will be ignored.
# Available versions: 
#     1  -  since taloLoggerGraph v1.1a and taloLogger v1.5a
SQLITEDB:DB_SCHEMA_VERSION = 1


############################################################################# 
# ThingSpeak cloud data store configuration
############################################################################# 

# ThingSpeak URL (these should be OK if the service does not change):
THINGSPEAK:HOST = api.thingspeak.com
THINGSPEAK:URL_PATH = /update

# ThingSpeak API key (authorizes and identifies the channel):
THINGSPEAK:APIKEY = XXXXXXXXXXXXXXXX

# ************  NOTE!!  *****************************************************
# ThingSpeak only accepts data named "field1", "field2", ..., "field8".
# Be careful to name the measurement points or virtual measurement points
# accordingly or use store filter to rename points for this data store. 
# ************  NOTE!!  *****************************************************



############################################################################# 
# MQTT broker data store configuration
############################################################################# 

# MQTT broker hostname/IP-address and port number (default 1883)
MQTT:HOST = localhost
MQTT:PORT = 1883

# MQTT client id for this taloLogger instance
MQTT:CLIENT_ID = taloLogger

# Authentication - if username is defined, authentication and password is used.
# Empty username disables authentication.
MQTT:USERNAME = 
MQTT:PASSWORD = 

# MQTT protocol version to use. Values:
#   1 - MQTTv31 (default)
#   2 - MQTTv311
MQTT:PROTOCOL = 1

# MQTT topic to use for publishing (see PUBLISH_SCHEME for more information)
MQTT:TOPIC = taloLogger

# MQTT topic and publish and payload scheme for taloLogger. Values:
#   1 - simple payload, separate topics for measured values (default)
#   2 - JSON payload with timestamp, separate topics for measured values
#   3 - JSON payload with timestamp, one topic, one JSON containing all 
#       measured values
# 
# Examples:   TOPIC = home/taloLogger
#             time of measurement (timestamp) = 1584270392
#             measured values:  
#                 outdoor: 13.2
#                 indoor: 20.1
#
#   Scheme 1:     
#       Two separate published topics (topic: payload):
#           home/taloLogger/outdoor: 13.2
#           home/taloLogger/indoor: 20.1
#
#   Scheme 2: 
#       Two separate published topics (topic: payload):
#           home/taloLogger/outdoor: { 'timestamp': '1584270392', 'value': '13.2' } 
#           home/taloLogger/indoor: { 'timestamp': '1584270392', 'value': '20.1' }
#
#   Scheme 3: 
#       One published topic with all data (topic: payload):
#           home/taloLogger: { 'timestamp': '1584270392', 'outdoor': '13.2', 'indoor': '20.1' } 
#
MQTT:PUBLISH_SCHEME = 1



############################################################################# 
# Logged measurement points and data store key configuration
############################################################################# 
#
# Syntax:  @MEASURE=key:source.point
#
#          key    - title or key for the measured value, key is used as label
#                   in file logging, as a database column name in DB 
#                   logging and as ds-name in rrdtool logging
# 
#          source - modulename for retrieving the value. Source modules and 
#                   their names are configured using the DATASOURCE 
#                   configuration file directives.
#
#          point  - name of the module specific measurement
#                   (for DigiTemp module the name is the sensor number 
#                    configured in .digitemprc)
#
#############################################################################

# example dummy measurement
@MEASURE = dummy:DUMMY.AnyDummyValue

# example measurements for OUMAN
# @MEASURE = ulkolampo:OUMAN.Ulkolampotila
# @MEASURE = menovesi:OUMAN.L1 menovesi
# @MEASURE = yla_tulo:OUMAN.Varaaja ylatulo
# @MEASURE = var_yla:OUMAN.Varaaja yla
# @MEASURE = var_keski:OUMAN.Varaaja keski
# @MEASURE = var_ala:OUMAN.Varaaja ala
# @MEASURE = maaliuos_lahto:OUMAN.Maaliuos
# @MEASURE = tilatieto:OUMAN.Tilamuuttuja

# example measurements for OUMANEH800
# @MEASURE = ulkolampo:OUMANEH800.S_227_85

# example measurements for THERMIA
# @MEASURE = outdoor:THERMIA.outdoor
# @MEASURE = indoor:THERMIA.room temp

# example measurements for REGO
# @MEASURE = outdoor:REGO.GT2 Outdoor

# example measurements for REGOCAN
# @MEASURE = outdoor:REGOCAN.Outdoor

# example measurements for EKOWELL
# @MEASURE = outdoor:EKOWELL.Ulkolampo

# example measurements for NIBE
# @MEASURE = outdoor:NIBE.Ulkolampotila

# example measurements for NIBEMODBUS
# @MEASURE = outdoor:NIBEMODBUS.BT1 Outdoor temp

# example measurements for NIBERS485
# @MEASURE = outdoor:NIBERS485.BT1 Outdoor temp

# example measurements for THERMIQ
# @MEASURE = outdoor:THERMIQ.outdoor temp

# example measurements for HUSDATA
# @MEASURE = outdoor:HUSDATA.007
# @MEASURE = compressor:HUSDATA.A01

# example measurements for SMARTWEB
# @MEASURE = outdoor:SMARTWEB.Outdoor

# example measurements for OWFS
# @MEASURE = outdoor:OWFS.Outdoor
# @MEASURE = kwh_counter:OWFS.Kwh_counter

# example measurement for DigiTemp
# @MEASURE = outdoor:DIGITEMP.1
# get the second value line from Digitemp output 
# @MEASURE = counter_b:DIGITEMP.2#2

# example measurement for EDS OWSERVER
# @MEASURE = outdoor:EDSOWSERVER.Outdoor

# example measurement for ShellSource
# @MEASURE = loggedinusers:SHELL1.users
# @MEASURE = systemload:SHELL1.load

# example measurement for Telldus
# @MEASURE = outdoor:TELLDUS.Outdoor

# example measurement for Raspberry Pi GPIO
# @MEASURE = raspistate1:GPIO.State1
# @MEASURE = raspicounter1:GPIO.Counter1

# example measurement for Modbus
# @MEASURE = outdoor:MODBUS.outdoor

# example measurement for Enervent EDA ModbusTCP
# @MEASURE = supplyairtemp:EDAMODBUSTCP.Supply air temperature X3

# example measurement for Enervent EDA Modbus Serial RTU
# @MEASURE = supplyairtemp:EDASERIAL.Supply air temperature X3

# example measurements for STELTRONCAN
# @MEASURE = outdoor:STELTRONCAN.Outdoor



############################################################################# 
# Logged virtual measurement points and data store key configuration
############################################################################# 
#
# Syntax:  @VIRTUAL=key:type:expression/function
#
#          key    - title or key for the measured virtual value, key is used as label
#                   in file logging, as a database column name in DB 
#                   logging and as ds-name in rrdtool logging
# 
#          type   - type of the virtual measurement point
#                     1 - expression, the evaluated expression is given in the
#                         expression part
#                     2 - function, the virtual measurement point will call
#                         this function to calculate the result (this is
#                         not implemented yet in the v1.5c version)
#
#          expression/function - 
#                   expression to evaluate or name of the function to call
#                   to calculate the result. Depends on the type parameter.
#                   Function support is not available in v1.5c yet.
#
# The virtual measurements are evaluated in the order they appear in the
# configuration. Calculated values evaluated on previous rows can be
# used to calculate a virtual measurement. If one or more datapoints
# are unavailable or empty when the virtual measurement is calculated,
# the result of the measurement will be empty.
#
# Parameters usable in expressions:
#
#      %_%TIME%_% - time of the measurement in seconds from Unix epoch
#
#      %_key_%  - key is the name of the measurement point to substitute here,
#               all measurement keys and virtual measurement keys evaluated
#               before this are available.
#
# Accessing values from the previous log run: If there is data available
# from the previous log run, parameters %/_%TIME%_/% and %/_key_/% contain the
# values from the previous run and can be utilized.
#
# Using mathematical functions (Python math library): Functions of the
# Python math library are available in the expressions. Functions must
# have the "math."-prefix. Also all Python operators and built-in 
# functions can be used. Example: math.sqrt(%_value_%) 
#
############################################################################# 

# example: calculate difference between indoor and outdoor
#@VIRTUAL=tempdiff:1:%_indoor_% - %_outdoor_%

# example: calculate difference between outdoor and outdoor from previous log run
#@VIRTUAL=tempchange:1:%_outdoor_% - %/_outdoor_/%

# example: calculate counter change speed in minute from counter value now, 
# previous counter value, log time and previous log time
#@VIRTUAL=counterspeed:1:60 * (%_counter_% - %/_counter_/%) / (%_%TIME%_% - %/_%TIME%_/%)

# example: use virtual measurement counterspeed defined above to calculate counterspeed in hour
#@VIRTUAL=counterspeedhour:1:60 * %_counterspeed_%



############################################################################# 
# Filtering data stored to datastore modules 
############################################################################# 
#
# Syntax:  @STOREFILTER=modulename:value_key[:datastore_key]
#
#          modulename - modulename of the datastore (configured with 
#                   @DATASTORE-directive)
#
#          value_key  - title or key for the measured value configured 
#                   with @MEASURE-directive)
#
#          datastore_key - use this title or key for the measured value
#                   for this data store instead of the value_key
#                   (which is default, if this key is not given or
#                   filters are not defined).
#
# Info:    By default, all measured data will be stored to all configured
#          datastores (@DATASTORE-directives). With @STOREFILTER-directive
#          it is possible to list all value keys that will be stored in
#          each data store. If a filter for configured module is not
#          present (no @STOREFILTER-rows exist for a data store), all
#          data values will be stored to that particular store. If one or
#          more filter rows are present for a store, only those data values
#          listed will be stored. By default the data will be stored using
#          the value_key name. If datastore_key is given, for this data store
#          the value_key is used as a identifier name for the value.
#
# Example: Store only outdoor and indoor values to MySQL, only outdoor
#          to RRDtool, only outdoor and indoor to ThingSpeak (and rename
#          the values as "field1" and "field2" for ThingSpeak 
#          and all configured values to any other datastore that
#          is configured using @DATASTORE-directives:
#
#            @STOREFILTER=MYSQLDB:outdoor
#            @STOREFILTER=MYSQLDB:indoor
#            @STOREFILTER=RRD:outdoor
#            @STOREFILTER=THINGSPEAK:outdoor:field1
#            @STOREFILTER=THINGSPEAK:indoor:field2
#
#############################################################################

#@STOREFILTER=MYSQLDB:outdoor
#@STOREFILTER=MYSQLDB:indoor
#@STOREFILTER=RRD:outdoor
#@STOREFILTER=THINGSPEAK:outdoor:field1
#@STOREFILTER=THINGSPEAK:indoor:field2